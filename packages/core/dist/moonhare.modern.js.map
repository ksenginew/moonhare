{"version":3,"file":"moonhare.modern.js","sources":["../src/order.ts","../src/parse.ts","../src/setup.ts","../src/index.ts"],"sourcesContent":["let selectorOrder = ['^:h', '^:f', '^:a']\nlet atRuleOrder = ['^@media']\n\nlet getSelectorScore = (selector: string, selOrder: (string | RegExp)[]) => {\n    let score = 0\n    selOrder.forEach((o, i) => {\n        if (selector.match(o)) score += i + 1\n    })\n    return score\n}\n\nlet getAtRuleScore = (atRules: string[], atOrder: (string | RegExp)[]) => {\n    let score = 0\n    atRules.forEach((atRule, ii) => {\n        atOrder.forEach((o, i) => {\n            if (atRule && atRule.match(o)) score += (i + 1) * (ii + 1)\n        })\n    })\n    return score\n}\n\nexport { getSelectorScore, getAtRuleScore, selectorOrder, atRuleOrder }\n","import { CSSAttribute, Style } from './types'\n\n/**\n * parses the object into css, scoped, blocks\n * @param {Object} obj\n * @param {String} selector\n * @param {String} wrapper\n */\nexport let parse = (obj: CSSAttribute, selector = '{:}') => {\n    let styles: Style[] = []\n\n    for (let key in obj) {\n        let val = obj[key]\n\n        let decl = (val?: string | number) => {\n            // If this isn't an empty rule\n            if (val != undefined) key = key.replace(/[A-Z]/g, '-$&').toLowerCase()\n            // Push the line for this property\n            styles.push({\n                s: selector,\n                p: key,\n                v: val + '',\n                a: []\n            })\n        }\n        if (Array.isArray(val)) {\n            val.map(decl)\n        } else if (key[0] == '@') {\n            // Regular at rule block\n            parse(val as CSSAttribute, key[1] == 'k' ? '' : selector).forEach((style) => {\n                style.a.push(key)\n                styles.push(style)\n            })\n        } else if (typeof val == 'object') {\n            val\n            // Call the parse for this block\n            let newSel = selector\n                ? // Go over the selector and replace the matching multiple selectors if any\n                  selector.replace(/([^,])+/g, (sel) => {\n                      // Return the current selector with the key matching multiple selectors if any\n                      return key.replace(/(^:.*)|([^,])+/g, (k) => {\n                          // If the current `k`(key) has a nested selector replace it\n                          if (/&/.test(k)) return k.replace(/&/g, sel)\n\n                          // If there's a current selector concat it\n                          return sel ? sel + ' ' + k : k\n                      })\n                  })\n                : key\n            styles = styles.concat(parse(val, newSel))\n        } else {\n            decl(val)\n        }\n    }\n\n    // If we have properties apply standard rule composition\n    return styles\n}\n","import { CSSAttribute, Style } from './types'\nimport { atRuleOrder, getAtRuleScore, getSelectorScore, selectorOrder } from '../../core/src/order'\nimport { parse } from './parse'\n\nexport let setup = (\n    selOrder: (string | RegExp)[] = selectorOrder,\n    atOrder: (string | RegExp)[] = atRuleOrder\n) => {\n    // count to generate unique class names.\n    let count: number = 0\n    let sheet: Style[] = []\n    let fire: (style: Style) => void = sheet.push\n    // JavaScript Map like implementation for style sheet.\n    let cache: Record<string, string> = {}\n\n    let render = (styles: CSSAttribute) => {\n        return parse(styles)\n            .map((style) => {\n                //\n                let { s: selector, p: property, v: value, a: atRules } = style\n                let ref = selector + property + value + atRules\n\n                // if the style is not in the cache\n                if (!cache[ref]) {\n                    // generate a unique class name. It's base 36 number\n                    let className = (style.c = '_' + (count++).toString(36))\n\n                    // give marks to atRules\n                    style.r = getAtRuleScore(atRules, atOrder)\n                    // give marks to selector\n                    style.r = getSelectorScore(selector.replace(/^\\{:\\}/, ''), selOrder)\n\n                    // insert the class name to the selector\n                    style.s = selector.replace(/{:}/g, '.' + className)\n\n                    fire(style)\n\n                    // update the cache\n                    cache[ref] = className\n                }\n\n                // return the class name\n                return cache[ref]\n            })\n            .join(' ')\n    }\n\n    return { render, cache, sheet, listen: (fn: typeof fire) => (fire = fn) }\n}\n","import { setup } from './setup'\n\nlet { render, sheet } = setup()\n\nexport { render, sheet, setup }\n\nexport type { Style, Context, CSSAttribute } from './types'\n"],"names":["selectorOrder","atRuleOrder","parse","obj","selector","styles","key","val","decl","undefined","replace","toLowerCase","push","s","p","v","a","Array","isArray","map","forEach","style","newSel","sel","k","test","concat","setup","selOrder","atOrder","count","sheet","fire","cache","render","property","value","atRules","ref","className","c","toString","r","score","atRule","ii","o","i","match","getAtRuleScore","getSelectorScore","join","listen","fn"],"mappings":"AAAA,IAAIA,EAAgB,CAAC,MAAO,MAAO,OAC/BC,EAAc,CAAC,WCORC,EAAQ,CAACC,EAAmBC,EAAW,SAC9C,IAAIC,EAAkB,GAEtB,IAAK,IAAIC,KAAOH,EAAK,CACjB,IAAII,EAAMJ,EAAIG,GAEVE,EAAQD,IAEGE,MAAPF,IAAkBD,EAAMA,EAAII,QAAQ,SAAU,OAAOC,eAEzDN,EAAOO,KAAK,CACRC,EAAGT,EACHU,EAAGR,EACHS,EAAGR,EAAM,GACTS,EAAG,MAGX,GAAIC,MAAMC,QAAQX,GACdA,EAAIY,IAAIX,WACS,KAAVF,EAAI,GAEXJ,EAAMK,EAA+B,KAAVD,EAAI,GAAY,GAAKF,GAAUgB,QAASC,IAC/DA,EAAML,EAAEJ,KAAKN,GACbD,EAAOO,KAAKS,aAEK,iBAAPd,EAAiB,CAG/B,IAAIe,EAASlB,EAEPA,EAASM,QAAQ,WAAaa,GAEnBjB,EAAII,QAAQ,kBAAoBc,GAE/B,IAAIC,KAAKD,GAAWA,EAAEd,QAAQ,KAAMa,GAGjCA,EAAMA,EAAM,IAAMC,EAAIA,IAGrClB,EACND,EAASA,EAAOqB,OAAOxB,EAAMK,EAAKe,SAElCd,EAAKD,GAKb,OAAOF,GCpDAsB,EAAQ,CACfC,EAAgC5B,EAChC6B,EAA+B5B,KAG/B,IAAI6B,EAAgB,EAChBC,EAAiB,GACjBC,EAA+BD,EAAMnB,KAErCqB,EAAgC,GAkCpC,MAAO,CAAEC,OAhCK7B,GACHH,EAAMG,GACRc,IAAKE,IAEF,IAAMR,EAAGT,EAAUU,EAAGqB,EAAUpB,EAAGqB,EAAOpB,EAAGqB,GAAYhB,EACrDiB,EAAMlC,EAAW+B,EAAWC,EAAQC,EAGxC,IAAKJ,EAAMK,GAAM,CAEb,IAAIC,EAAalB,EAAMmB,EAAI,KAAOV,KAASW,SAAS,IAGpDpB,EAAMqB,EFjBL,EAACL,EAAmBR,KACrC,IAAIc,EAAQ,EAMZ,OALAN,EAAQjB,QAAQ,CAACwB,EAAQC,KACrBhB,EAAQT,QAAQ,CAAC0B,EAAGC,KACZH,GAAUA,EAAOI,MAAMF,KAAIH,IAAUI,EAAI,IAAMF,EAAK,QAGzDF,GEUmBM,CAAeZ,EAASR,GAElCR,EAAMqB,EF3BH,EAACtC,EAAkBwB,KACtC,IAAIe,EAAQ,EAIZ,OAHAf,EAASR,QAAQ,CAAC0B,EAAGC,KACb3C,EAAS4C,MAAMF,KAAIH,GAASI,EAAI,KAEjCJ,GEsBmBO,CAAiB9C,EAASM,QAAQ,SAAU,IAAKkB,GAG3DP,EAAMR,EAAIT,EAASM,QAAQ,OAAQ,IAAM6B,GAEzCP,EAAKX,GAGLY,EAAMK,GAAOC,EAIjB,OAAON,EAAMK,KAEhBa,KAAK,KAGGlB,MAAAA,EAAOF,MAAAA,EAAOqB,OAASC,GAAqBrB,EAAOqB,KC7CpEnB,OAAEA,EAAFH,MAAUA,GAAUJ"}