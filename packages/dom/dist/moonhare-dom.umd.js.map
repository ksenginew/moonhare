{"version":3,"file":"moonhare-dom.umd.js","sources":["../src/extract.ts","../src/insert.ts","../src/stringify.ts","../src/getindex.ts","../src/index.ts","../src/sheet.ts"],"sourcesContent":["export let extract = (sheet: CSSStyleSheet) => {\r\n    let css = ''\r\n    while (sheet.cssRules.length) {\r\n        css += sheet.cssRules[0].cssText\r\n        sheet.deleteRule(0)\r\n    }\r\n    return css\r\n}\r\n","import { Style } from '@moonhare/core'\r\nimport { getIndex } from './getindex'\r\nimport { stringify } from './stringify'\r\n\r\nexport let insert = (sheet: CSSStyleSheet, style: Style) => {\r\n    let { m: score, r: atRuleScore } = style\r\n    let index = getIndex(score as number, atRuleScore as number, sheet.cssRules)\r\n    sheet.insertRule(stringify(style), index)\r\n    // @ts-ignore we are hacking built in css rule\r\n    sheet.cssRules[index].a = atRuleScore\r\n    // @ts-ignore we are hacking built in css rule\r\n    sheet.cssRules[index].s = score\r\n}\r\n","import { Style } from '@moonhare/core'\r\n\r\nexport let stringify = ({ s: selector, p: property, v: value, a: atRules }: Style) => {\r\n    atRules.push(selector)\r\n    return atRules.reduce((css, atRule) => atRule + '{' + css + '}', property + ':' + value)\r\n}\r\n","export let getIndex = (score: number, atRuleScore: number, cssRules: CSSRuleList) => {\r\n    // set the index to last\r\n    let index = cssRules.length\r\n\r\n    // find the index of the style\r\n    for (let i = 0, len = cssRules.length; i < len; ++i) {\r\n        // @ts-ignore we are hacking built in css rule\r\n        if ((cssRules[i].a as number) > atRuleScore || (cssRules[i].s as number) > score) {\r\n            index = i\r\n            break\r\n        }\r\n    }\r\n\r\n    return index\r\n}\r\n","import type { Context } from '@moonhare/core'\nimport { extract } from './extract'\nimport { insert } from './insert'\nimport { getSheet } from './sheet'\n\ninterface DOMContext extends Context {\n    extract: () => string\n}\n\nexport let render = (ctx: Context, container: HTMLElement) => {\n    let sheet = getSheet(container)\n    let domCtx: DOMContext = ctx as DOMContext\n    domCtx.extract = extract.bind(null, sheet)\n    domCtx.listen(insert.bind(null, sheet))\n    return domCtx\n}\n","let ID = 'mh' as const\r\n\r\nexport let getSheet = (target: HTMLElement = document.head) =>\r\n    // Querying the existing target for a previously defined <style> tag\r\n    // We're doing a querySelector because the <head> element doesn't implemented the getElementById api\r\n    (\r\n        (target.querySelector('#' + ID) as HTMLStyleElement) ||\r\n        Object.assign(target.appendChild(document.createElement('style')), {\r\n            innerHTML: ' ',\r\n            id: ID\r\n        })\r\n    ).sheet as CSSStyleSheet\r\n"],"names":["extract","sheet","css","cssRules","length","cssText","deleteRule","insert","style","property","value","atRules","score","m","atRuleScore","r","index","i","len","a","s","getIndex","insertRule","p","v","push","reduce","atRule","ctx","container","target","document","head","querySelector","Object","assign","appendChild","createElement","innerHTML","id","domCtx","bind","listen"],"mappings":"yOAAWA,EAAU,SAACC,GAElB,IADA,IAAIC,EAAM,GACHD,EAAME,SAASC,QAClBF,GAAOD,EAAME,SAAS,GAAGE,QACzBJ,EAAMK,WAAW,GAErB,OAAOJ,GCFAK,EAAS,SAACN,EAAsBO,GACvC,MCHsCC,EAAaC,EAAUC,EDGpDC,EAA0BJ,EAA7BK,EAAaC,EAAgBN,EAAnBO,EACZC,EENc,SAACJ,EAAeE,EAAqBX,GAKvD,IAHA,IAAIa,EAAQb,EAASC,OAGZa,EAAI,EAAGC,EAAMf,EAASC,OAAQa,EAAIC,IAAOD,EAE9C,GAAKd,EAASc,GAAGE,EAAeL,GAAgBX,EAASc,GAAGG,EAAeR,EAAO,CAC9EI,EAAQC,EACR,MAIR,OAAOD,EFPKK,CAAST,EAAiBE,EAAuBb,EAAME,UACnEF,EAAMqB,YCLgCb,KDKXD,GCLQe,EAAgBb,IAAHc,GAAab,IAAHQ,GAClDM,OADcL,GAEfT,EAAQe,OAAO,SAACxB,EAAKyB,UAAWA,EAAS,IAAMzB,EAAM,KAAKO,EAAW,IAAMC,IDG/CM,GAEnCf,EAAME,SAASa,GAAOG,EAAIL,EAE1Bb,EAAME,SAASa,GAAOI,EAAIR,YGFV,SAACgB,EAAcC,GAC/B,ICRmBC,EDQf7B,aCRe6B,EDQED,KCRFC,EAAsBC,SAASC,OAI7CF,EAAOG,cAAc,QACtBC,OAAOC,OAAOL,EAAOM,YAAYL,SAASM,cAAc,UAAW,CAC/DC,UAAW,IACXC,GATH,QAWHtC,ODAEuC,EAAqBZ,EAGzB,OAFAY,EAAOxC,QAAUA,EAAQyC,KAAK,KAAMxC,GACpCuC,EAAOE,OAAOnC,EAAOkC,KAAK,KAAMxC,IACzBuC"}